// Code generated by MockGen. DO NOT EDIT.
// Source: bus.go
//
// Generated by this command:
//
//	mockgen -source=bus.go -destination=mock/bus.go
//

// Package mock_bus is a generated GoMock package.
package mock_bus

import (
	reflect "reflect"
	bus "userservice/internal/bus"

	gomock "go.uber.org/mock/gomock"
)

// MockExternalBus is a mock of ExternalBus interface.
type MockExternalBus struct {
	ctrl     *gomock.Controller
	recorder *MockExternalBusMockRecorder
	isgomock struct{}
}

// MockExternalBusMockRecorder is the mock recorder for MockExternalBus.
type MockExternalBusMockRecorder struct {
	mock *MockExternalBus
}

// NewMockExternalBus creates a new mock instance.
func NewMockExternalBus(ctrl *gomock.Controller) *MockExternalBus {
	mock := &MockExternalBus{ctrl: ctrl}
	mock.recorder = &MockExternalBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalBus) EXPECT() *MockExternalBusMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockExternalBus) Publish(event *bus.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockExternalBusMockRecorder) Publish(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockExternalBus)(nil).Publish), event)
}

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
	isgomock struct{}
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockEventHandler) Handle(event []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", event)
}

// Handle indicates an expected call of Handle.
func (mr *MockEventHandlerMockRecorder) Handle(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEventHandler)(nil).Handle), event)
}
