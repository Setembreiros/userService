// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mock_search_user is a generated GoMock package.
package mock_search_user

import (
	reflect "reflect"
	model "userservice/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockControllerService is a mock of ControllerService interface.
type MockControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerServiceMockRecorder
}

// MockControllerServiceMockRecorder is the mock recorder for MockControllerService.
type MockControllerServiceMockRecorder struct {
	mock *MockControllerService
}

// NewMockControllerService creates a new mock instance.
func NewMockControllerService(ctrl *gomock.Controller) *MockControllerService {
	mock := &MockControllerService{ctrl: ctrl}
	mock.recorder = &MockControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerService) EXPECT() *MockControllerServiceMockRecorder {
	return m.recorder
}

// SearchUserProfileSnippets mocks base method.
func (m *MockControllerService) SearchUserProfileSnippets(query string, limit int) ([]*model.UserProfileSnippet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserProfileSnippets", query, limit)
	ret0, _ := ret[0].([]*model.UserProfileSnippet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserProfileSnippets indicates an expected call of SearchUserProfileSnippets.
func (mr *MockControllerServiceMockRecorder) SearchUserProfileSnippets(query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserProfileSnippets", reflect.TypeOf((*MockControllerService)(nil).SearchUserProfileSnippets), query, limit)
}
