// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_search_user is a generated GoMock package.
package mock_search_user

import (
	reflect "reflect"
	model "userservice/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// SearchUserProfileSnippets mocks base method.
func (m *MockRepository) SearchUserProfileSnippets(query, lastUsername string, limit int) ([]*model.UserProfileSnippet, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserProfileSnippets", query, lastUsername, limit)
	ret0, _ := ret[0].([]*model.UserProfileSnippet)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchUserProfileSnippets indicates an expected call of SearchUserProfileSnippets.
func (mr *MockRepositoryMockRecorder) SearchUserProfileSnippets(query, lastUsername, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserProfileSnippets", reflect.TypeOf((*MockRepository)(nil).SearchUserProfileSnippets), query, lastUsername, limit)
}
